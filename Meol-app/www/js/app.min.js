 "use strict"; var directory = { config: { root: window.location.pathname.replace(/\/(?:index.html)?$/, '') }, dao: {}, data: {}, models: {}, views: {}, utils: {}, }; $().ready(function() { init(); }) ; function init(){ window.heightScreen = $(window).height(); window.widthScreen = $(window).width(); window.graph; window.allTaxonNb; window.deferreds = []; $("body").addClass("ui-disabled"); $("body").append("<img id='dataloader-img' src='css/images/ajax-loader.gif'/>"); initDB(); directory.utils.templateLoader.load(['feedback-page','credit-page','profil-page','profil-table','d3-graph-panel', 'request-panel','gallery-taxon-list', 'gallery-panel', 'home-page', 'search-page', 'taxon-panel', 'taxon-list-item', 'gallery-detail','gallery-page', 'gallery-list-item','play-list-gallery','play-gallery', 'play-gameboard']); $.when.apply(null, deferreds).done(function() { directory.data.galleriesList = new directory.models.GalleriesCollection(); directory.data.galleriesList.fetch({ success: function(data) { directory.app = new directory.Router(); Backbone.history.start(); $('#dataloader-img').remove(); $("body").removeClass("ui-disabled"); } }); }); } function initDB(){ directory.db = openDatabase("meol-taxon", "1.0", "db meol-taxon", 20*1024*1024); initializeDB(directory.db); var dfd = $.Deferred(); deferreds.push(dfd); $.when(runQuery("SELECT * FROM Ttaxons" , [])).done(function (dta) { var arr = []; if (dta.rows.length == 0 ) { arr.push(loadTaxaFile(directory.db)); arr.push(loadItemsFile(directory.db)); arr.push(loadGalleryFile(directory.db)); var requete = "INSERT INTO Tprofil (pseudo, avatar) VALUES ('Player 1', null)"; arr.push(runQuery(requete, [])); } $.when.apply(this, arr).then(function () { return dfd.resolve(); }); }).fail(function (err) { return dfd.resolve(); }); } "use strict"; directory.Router = Backbone.Router.extend({ routes: { "": "home", "searchtaxon": "searchtaxon", "creditPage": "creditPage", "gallery": "discoverGalleryList", "gallery/:galleryId": "discoverGalleryTaxonomicTreeView", "play" : "playListGallery", "play/:galleryId" : "playGameboardDisplay", "profil/:profilId" : "profilDisplay", "feedback" : "feedbackDisplay", }, initialize: function() { var self = this; this.pageHistory = []; $('#content').on('click', '.header-back-button', function(event) { window.history.back(); return false; }); if (document.documentElement.hasOwnProperty('ontouchstart')) { $('#content').on('touchstart', 'a', function(event) { self.selectItem(event); }); $('#content').on('touchend', 'a', function(event) { self.deselectItem(event); }); } else { $('#content').on('mousedown', 'a', function(event) { self.selectItem(event); }); $('#content').on('mouseup', 'a', function(event) { self.deselectItem(event); }); } this.currentProfil = new directory.models.Profil({Tprofil_PK_Id:1}); this.currentProfil.fetch(); }, selectItem: function(event) { $(event.target).addClass('tappable-active'); }, deselectItem: function(event) { $(event.target).removeClass('tappable-active'); }, home: function(){ if (typeof (this.homePage) === 'undefined') this.homePage = new directory.views.HomeView(); this.displayView(this.homePage); }, feedbackDisplay : function(){ this.feedback = new directory.views.feedbackView(); this.displayView(this.feedback); }, creditPage : function(){ this.creditPage = new directory.views.creditPageView(); this.displayView(this.creditPage); }, searchtaxon: function() { var self = this; this.searchResults = new directory.models.TaxonCollection(); var currentView = new directory.views.SearchPage({model: this.searchResults}); this.displayView(currentView); }, displayView : function (view) { var self = this; var dfda = Array(); if (this.currentView) { dfda.push(this.currentView.close()); } else { var dfdl = $.Deferred(); dfda.push(dfdl); dfdl.resolve(true); } $.when.apply(null, dfda) .done(function() { view.render(); self.currentView = view; self.pageHistory = [window.location.hash]; $('#content').empty(); $('#content').append(view.el); if(view.onAddToDom) view.onAddToDom(); }) .fail(function() { self.navigate(self.pageHistory[0]); }); }, discoverGalleryList: function() { var currentView = new directory.views.GalleryListView({model: directory.data.galleriesList}); this.displayView(currentView); }, playListGallery: function() { var currentView = new directory.views.playListGalleryView({collection: directory.data.galleriesList, currentProfil : self.currentProfil}); this.displayView(currentView); }, playGameboardDisplay : function(id) { var self = this; var gallery = directory.data.galleriesList.findWhere( {'collectionid': id}); gallery.set('id', id); if(gallery.get('active') == "false"){ alert(gallery.get('active')); window.history.back(); return false; }else{ var selfProfil =self.currentProfil; var scoreByfk_profil = new directory.models.ScoresCollection(); scoreByfk_profil.fetch({ success: function(data) { var lastScoreByGallery = data.findWhere({'fk_gallery': parseInt(id)}); var deferred = data.findScoreMaxByGallery(); deferred.done(function(items) { var score = 0; _.each(items, function(item) { score += item.score_max; if(item.fk_gallery == id){ var lastScoreByGallery = item.score_max; } }); var currentView = new directory.views.playGameboardView({model: gallery, currentProfil : self.currentProfil, lastScoreByGallery: lastScoreByGallery, scoreByfk_profil:data, ScoreGlobal: score}); self.displayView(currentView); }); } }); } }, discoverGalleryTaxonomicTreeView: function(id) { var gallery = directory.data.galleriesList.findWhere( {'collectionid': id}); gallery.set('id', id); var currentView = new directory.views.GalleryDetailView({model: gallery}); this.displayView(currentView); }, profilDisplay: function(id) { var self = this; var profil = new directory.models.Profil({Tprofil_PK_Id:id}); var collection = new directory.models.ScoresCollection(); profil.fetch({ success: function(data) { collection.bind("reset", self.render, self); var deferred = collection.findAllScoreByProfilId(data.get('Tprofil_PK_Id')); deferred.done(function(items) { var score = 0; var ordreMax = 1; _.each(items, function(item) { var ordreCurrent = directory.data.galleriesList.galleryOrdreById(String(item.fk_gallery)); if(ordreCurrent > ordreMax){ ordreMax = ordreCurrent; }; score += item.score_max;	 }); collection.bind("change", self.render, self); var currentView = new directory.views.ProfilDetailView({model: data, allScoreById : items, scoreTotal : score, ordreMax : ordreMax}); collection.bind("reset", self.render, self); self.displayView(currentView); collection.bind("reset", self.render, self); }); } }); }, }); "use strict"; /* * method – the CRUD method ("create", "read", "update", or "delete") model – the model to be saved (or collection to be read) options – success and error callbacks, and all other jQuery request options */ Backbone.sync = function(method, model, options) { var dao = new model.dao(directory.db); if (method === "read") { if (model.attributes) { if ( (model.attributes.taxonConceptId)) { dao.findByTaxonConceptId(model.attributes.taxonConceptId, function(data) { options.success(data); }); } else if (model.attributes.taxonName) { dao.taxonName(model.taxonName, function(data) { options.success(data); }); } else if (model.attributes.collectionid) { dao.findByGalleryId(model.attributes.collectionid, function(data) { options.success(data); }); } else if (model.attributes.fk_collectionid) { dao.findByGalleryId(model.attributes.fk_collection, function(data) { options.success(data); }); } else if (model.attributes.pseudo) { dao.findByPseudo(model.attributes.pseudo, function(data) { options.success(data); }); } else if (model.attributes.Tprofil_PK_Id) { dao.findById(model.attributes.Tprofil_PK_Id, function(data) { options.success(data); }); } else { dao.findAll(function(data) { options.success(data); }); } } else { dao.findAll(function(data) { options.success(data); }); } } else if (method === "create") { if (model.attributes) { if ( (model.attributes.pseudo)) { dao.updatePseudoProfile(model, function(data) { options.success(data); }); } else if (model.attributes.fk_gallery) { dao.createScore(model, function(data) { options.success(data); }); } } else { dao.createScore(model, function(data) { options.success(data); }); } } else if (method === "update") { dao.updateGalleryActive(model, function(data) { options.success(data); }); } }; directory.dao.TaxonDAO = function(db) { this.db = db; }; directory.dao.GalleryDAO = function(db) { this.db = db; }; directory.dao.ItemDAO = function(db) { this.db = db; }; directory.dao.ProfilDAO = function(db) { this.db = db; }; directory.dao.ScoreDAO= function(db) { this.db = db; }; _.extend( directory.dao.TaxonDAO.prototype, { findByName: function(key, callback) { this.db.transaction( function(tx) { var sql = "SELECT fk_collectionid , pageid , taxonConceptId, taxonName , flathierarchy, preferredCommonNames , textDesc_objectid , textDesc_title , textDesc_credits , textDesc_description, iucnStatus , image_objectid , image_title, image_credits , image_fileName " + "FROM Ttaxons " + "WHERE preferredCommonNames || taxonName LIKE ? LIMIT 20"; tx.executeSql(sql, ['%' + key + '%'], function(tx, results) { var len = results.rows.length, taxons = [], i = 0; for (; i < len; i = i + 1) { taxons[i] = results.rows.item(i); } callback(taxons); }); }, function(tx, error) { console.log(tx); } ); }, findByTaxonConceptId: function(id, callback) { this.db.transaction( function(tx) { var sql = "SELECT fk_collectionid , pageid , taxonConceptId, taxonName , flathierarchy, preferredCommonNames , textDesc_objectid , textDesc_title , textDesc_credits , textDesc_description, iucnStatus , image_objectid , image_title, image_credits , image_fileName " + "FROM Ttaxons " + "WHERE taxonConceptId=?"; tx.executeSql(sql, [id], function(tx, results) { callback(results.rows.length === 1 ? results.rows.item(0) : null); }); }, function(tx, error) { console.log(tx); } ); }, findAllByCollectionid: function(id,callback) { this.db.transaction( function(tx) { var sql = "SELECT fk_collectionid , pageid , taxonConceptId, taxonName , flathierarchy, preferredCommonNames , textDesc_objectid , textDesc_title , textDesc_credits , textDesc_description, iucnStatus , image_objectid , image_title, image_credits , image_fileName " + "FROM Ttaxons " + "WHERE ','||fk_collectionid||',' LIKE ?"; tx.executeSql(sql,['%,' +id+',%' ], function(tx, results) { var len = results.rows.length, taxons = [], i = 0; for (; i < len; i = i + 1) { taxons[i] = results.rows.item(i); } callback(taxons); }); }, function(tx, error) { console.log(tx); } ); }, findAll: function(callback) { this.db.transaction( function(tx) { var sql = "SELECT fk_collectionid , pageid , taxonConceptId, taxonName , flathierarchy, preferredCommonNames , textDesc_objectid , textDesc_title , textDesc_credits , textDesc_description, iucnStatus , image_objectid , image_title, image_credits , image_fileName " + "FROM Ttaxons LIMIT 10" + tx.executeSql(sql,[], function(tx, results) { var len = results.rows.length, galleries = [], i = 0; for (; i < len; i = i + 1) { galleries[i] = results.rows.item(i); } callback(galleries); }); }, function(tx, error) { console.log(tx); } ); }, populate: function(callback) { directory.db.transaction( function(tx) { }, function(tx, error) { console.log(tx); }, function(tx) { callback(); } ); } } ); _.extend( directory.dao.GalleryDAO.prototype, { updateGalleryActive: function(model, callback) { this.db.transaction( function(tx) { var sql = "UPDATE Tgallery SET active= ? WHERE collectionid = ? "; tx.executeSql(sql, [model.get('active'), model.get('collectionid')]); }, function(tx, error) { console.log(tx); } ); }, findByName: function(key, callback) { this.db.transaction( function(tx) { var sql = "SELECT collectionid , name, description, logo, level, ordre, active " + "FROM Tgallery " + "WHERE name LIKE ? LIMIT 20"; tx.executeSql(sql, ['%' + key + '%'], function(tx, results) { var len = results.rows.length, galleries = [], i = 0; for (; i < len; i = i + 1) { galleries[i] = results.rows.item(i); } callback(galleries); }); }, function(tx, error) { console.log(tx); } ); }, findByGalleryId: function(id, callback) { this.db.transaction( function(tx) { var sql = "SELECT Tgallery_PK_Id, collectionid , name, description, logo, level, ordre, active "+ "FROM Tgallery " + "WHERE collectionid = ? "; tx.executeSql(sql, [id], function(tx, results) { callback(results.rows.length === 1 ? results.rows.item(0) : null); }); }, function(tx, error) { console.log(tx); } ); }, findAll: function(callback) { this.db.transaction( function(tx) { var sql = "SELECT Tgallery_PK_Id, collectionid , name, description, logo,level , ordre, active " + "FROM Tgallery ORDER BY level, ordre "; tx.executeSql(sql,[], function(tx, results) { var len = results.rows.length, galleries = [], i = 0; for (; i < len; i = i + 1) { galleries[i] = results.rows.item(i); } callback(galleries); }); }, function(tx, error) { console.log(tx); } ); }, populate: function(callback) {}, } ); _.extend( directory.dao.ItemDAO.prototype, { findByGalleryId: function(id, callback) { this.db.transaction( function(tx) { var sql = "SELECT *"+ "FROM Titems " + "WHERE fk_collectionid = ? AND NOT INat = '' "; tx.executeSql(sql,[id], function(tx, results) { var len = results.rows.length, items = [], i = 0; for (; i < len; i = i + 1) { items[i] = results.rows.item(i); } callback(items); }); }, function(tx, error) { console.log(tx); } ); }, findAll: function(callback) { this.db.transaction( function(tx) { var sql = "SELECT * FROM Titems LIMIT 50"; tx.executeSql(sql,[], function(tx, results) { var len = results.rows.length, items = [], i = 0; for (; i < len; i = i + 1) { items[i] = results.rows.item(i); } callback(items); }); }, function(tx, error) { console.log(tx); } ); }, populate: function(callback) {}, } ); _.extend( directory.dao.ProfilDAO.prototype, { /*** * defaults: { "Tprofil_PK_Id":null, "pseudo":"", "avatar":"", "creationDate":new Date() }, * ***/ updatePseudoProfile: function(model, callback) { this.db.transaction( function(tx) { var sql = "UPDATE Tprofil SET pseudo= ? WHERE Tprofil_PK_Id = ? "; tx.executeSql(sql, [model.get('pseudo'), model.get('Tprofil_PK_Id')]); }, function(tx, error) { console.log(tx); } ); }, findByPseudo: function(key, callback) { this.db.transaction( function(tx) { var sql = "SELECT * " + "FROM Tprofil " + "WHERE pseudo = ? LIMIT 20"; tx.executeSql(sql, [key], function(tx, results) { var len = results.rows.length, profils = [], i = 0; for (; i < len; i = i + 1) { profils[i] = results.rows.item(i); } callback(profils); }); }, function(tx, error) { console.log(tx); } ); }, findById: function(id, callback) { this.db.transaction( function(tx) { var sql = "SELECT * " + "FROM Tprofil " + "WHERE Tprofil_PK_Id=?"; tx.executeSql(sql, [id], function(tx, results) { callback(results.rows.length === 1 ? results.rows.item(0) : null); }); }, function(tx, error) { console.log(tx); } ); }, findAll: function(callback) { this.db.transaction( function(tx) { var sql = "SELECT * FROM Tprofil LIMIT 10" ; tx.executeSql(sql,[], function(tx, results) { var len = results.rows.length, profils = [], i = 0; for (; i < len; i = i + 1) { profils[i] = results.rows.item(i); } callback(profils); }); }, function(tx, error) { console.log(tx); } ); }, populate: function(callback) { } } ); _.extend( directory.dao.ScoreDAO.prototype, { /*** * defaults: { "Tprofil_PK_Id":null, "pseudo":"", "avatar":"", "creationDate":new Date() }, * ***/ createScore: function(model, callback) { this.db.transaction( function(tx) { var sql = 'INSERT INTO Tscore (fk_profil ,fk_gallery, gameDate , nbQuestionTotal, nbAnswerGood, nbAnswerGoodSequence, score) ' + ' VALUES (?, ?, ?, ?, ?, ?,?) '; tx.executeSql(sql, [model.get('fk_profil'), model.get('fk_gallery'),model.get('gameDate'), model.get('nbQuestionTotal'), model.get('nbAnswerGood'),model.get('nbAnswerGoodSequence'),model.get('score')]); }, function(tx, error) { console.log(tx); } ); }, updateScore: function(model, callback) { this.db.transaction( function(tx) { var sql = "UPDATE Tscore SET * WHERE fk_gallery = ? "; tx.executeSql(sql, [model.get('fk_gallery')]); }, function(tx, error) { console.log(tx); } ); }, findAllScoreByProfilId: function(key, callback) { this.db.transaction( function(tx) { var sql = 'SELECT fk_gallery, MAX(score) AS score_max, gameDate FROM Tscore WHERE fk_profil = ? GROUP BY fk_gallery '; tx.executeSql(sql, [key], function(tx, results) { var len = results.rows.length, score = [], i = 0; for (; i < len; i = i + 1) { score[i] = results.rows.item(i); } callback(score); }); }, function(tx, error) { console.log(tx); } ); }, findScoreMaxByGallery: function(callback) { this.db.transaction( function(tx) { var sql = "SELECT fk_gallery, MAX(score) AS score_max FROM Tscore GROUP BY fk_gallery"; tx.executeSql(sql,[], function(tx, results) { var len = results.rows.length, items = []; for (var i = 0; i < len; i++) { items[i] = results.rows.item(i); } callback(items); }); }, function(tx, error) { console.log(tx); } ); }, findScoreMaxByGalleryId: function(id,callback) { this.db.transaction( function(tx) { var sql = "SELECT MAX(score) AS score_max FROM Tscore WHERE fk_gallery = ?"; tx.executeSql(sql,[id], function(tx, results) { var len = results.rows.length, items = []; for (var i = 0; i < len; i++) { items[i] = results.rows.item(i); } callback(items); }); }, function(tx, error) { console.log(tx); } ); }, findAll: function(callback) { this.db.transaction( function(tx) { var sql = "SELECT * FROM Tscore ORDER BY Tscore_PK_Id DESC" ; tx.executeSql(sql,[], function(tx, results) { var len = results.rows.length, profils = [], i = 0; for (; i < len; i = i + 1) { profils[i] = results.rows.item(i); } callback(profils); }); }, function(tx, error) { console.log(tx); } ); }, populate: function(callback) { } } ); ﻿"use strict"; function initializeDB(db){ try { if (db) { var query = 'CREATE TABLE IF NOT EXISTS Ttaxons (Ttax_PK_Id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, ' + 'fk_collectionid NVARCHAR(200), pageid INTEGER, taxonConceptId INTEGER, taxonName NVARCHAR(200), flathierarchy text, preferredCommonNames NVARCHAR(200), textDesc_objectid NVARCHAR(200), textDesc_title NVARCHAR(200), textDesc_credits NVARCHAR(200), textDesc_description text, iucnStatus NVARCHAR(200), image_objectid NVARCHAR(200), image_title NVARCHAR(200), image_credits NVARCHAR(500), image_fileName NVARCHAR(200))'; deferreds.push(runQuery(query , [])); query = 'CREATE TABLE IF NOT EXISTS Tgallery (Tgallery_PK_Id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, ' + 'collectionid NVARCHAR(200), name NVARCHAR(200), description NVARCHAR(2000), logo NVARCHAR(200), level INTEGER, ordre INTEGER, active NVARCHAR(10))'; deferreds.push(runQuery(query , [])); query = 'CREATE TABLE IF NOT EXISTS Titems (Titem_PK_Id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, ' + 'fk_collectionid INTEGER, object_id INTEGER, pageid INTEGER, weightIucn INTEGER, weightContinent INTEGER, type NVARCHAR(20), taxonConceptId INTEGER, taxonName NVARCHAR(200), preferredCommonNames NVARCHAR(200), iNat NVARCHAR(200), title NVARCHAR(200), filename NVARCHAR(200))'; deferreds.push(runQuery(query , [])); query = 'CREATE TABLE IF NOT EXISTS Tprofil (Tprofil_PK_Id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, ' + 'pseudo NVARCHAR(50), avatar NVARCHAR(200),email NVARCHAR(80), creationDate DATETIME)'; deferreds.push(runQuery(query , [])); query = 'CREATE TABLE IF NOT EXISTS Tscore (Tscore_PK_Id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, ' + 'fk_profil INTEGER, fk_gallery INTEGER, gameDate DATETIME, nbQuestionTotal INTEGER, nbAnswerGood INTEGER, nbAnswerGoodSequence INTEGER, score INTEGER' + 'nbQuestionTotalAfrica INTEGER ,nbQuestionTotalAsia INTEGER ,nbQuestionTotalAntartica INTEGER ,nbQuestionTotalEurope INTEGER ,nbQuestionTotalOceania INTEGER ,nbQuestionTotalAmericaNorth INTEGER ,nbQuestionTotalAmericaSouth INTEGER,' + 'nbAnswerGoodAfrica INTEGER ,nbAnswerGoodAsia INTEGER ,nbAnswerGoodAntartica INTEGER ,nbAnswerGoodEurope INTEGER ,nbAnswerGoodOceania INTEGER ,nbAnswerGoodAmericaNorth INTEGER ,nbAnswerGoodAmericaSouth INTEGER )'; deferreds.push(runQuery(query , [])); } } catch (err) { console.log(err); } } function loadTaxaFile(db){	 var dfd = $.Deferred(); var arr = []; $.getJSON('data/detail_Taxon.json', function(json) { $.each(json, function(taxid, tax) { var hierarchy = JSON.stringify(tax.flathierarchy); var query = "Insert into Ttaxons(fk_collectionid , pageid , taxonConceptId, taxonName , flathierarchy, preferredCommonNames , textDesc_objectid , textDesc_title , textDesc_credits , textDesc_description, iucnStatus , image_objectid , image_title, image_credits , image_fileName ) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"; var param = [tax.collectionid , tax.pageid , tax.taxonConceptId, tax.taxonName ,hierarchy , tax.preferredCommonNames , tax.textDesc_objectid , tax.textDesc_title , tax.textDesc_credits , tax.textDesc_description, tax.iucnStatus , tax.image_objectid , tax.image_title, tax.image_credits , tax.image_fileName ]; arr.push(runQuery(query , param) ); }); $.when.apply(this, arr).then(function () { return dfd.resolve(); }); }); return dfd.promise(); } function loadGalleryFile(db){			 var dfd = $.Deferred(); var arr = []; $.getJSON('data/collection_metadata.json', function(json) { $.each(json, function(galleryid, gal) { var query = "Insert into Tgallery (collectionid, name, description, logo, level, ordre, active) values(?,?,?,?,?,?,?)"; var param = [galleryid , gal.name , gal.description, gal.logo, gal.level, gal.ordre, gal.active]; arr.push(runQuery(query , param) ); }); $.when.apply(this, arr).then(function () { return dfd.resolve(); }); }); return dfd.promise(); } function loadItemsFile(db){				 var dfd = $.Deferred(); var arr = []; $.getJSON('data/items.json', function(json) { $.each(json, function(itemid, it) { var query = "Insert into Titems (fk_collectionid, object_id, pageid, weightIucn, weightContinent,type, taxonConceptId, taxonName, preferredCommonNames, iNat, title, filename) values(?,?,?,?,?,?,?,?,?,?,?,?)"; var param = [it.fk_collection , it.pageid , it.pageid, it.weightIUCN, it.weightContinent, it.type, it.taxonConceptId, it.taxonName, it.common_name , it.iNat , it.title, it.filename]; arr.push(runQuery(query , param) ); }); $.when.apply(this, arr).then(function () { return dfd.resolve(); }); }); return dfd.promise(); } function runQuery(query , param) { return $.Deferred(function (d) { directory.db.transaction(function (tx) { tx.executeSql(query, param, successWrapper(d), failureWrapper(d)); }); }); }; function successWrapper(d) { return (function (tx, data) { d.resolve(data) }) }; function failureWrapper(d) { return (function (tx, error) { console.log('failureWrapper'); console.log(error); d.reject(error) }) }; /* * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements. See the NOTICE file * distributed with this work for additional information * regarding copyright ownership. The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License. You may obtain a copy of the License at * * http: * * Unless required by applicable law or agreed to in writing, * software distributed under the License is distributed on an * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY * KIND, either express or implied. See the License for the * specific language governing permissions and limitations * under the License. */ var app = { initialize: function() { this.bindEvents(); }, bindEvents: function() { document.addEventListener('deviceready', this.onDeviceReady, false); }, onDeviceReady: function() { app.receivedEvent('deviceready'); }, receivedEvent: function(id) { var parentElement = document.getElementById(id); var listeningElement = parentElement.querySelector('.listening'); var receivedElement = parentElement.querySelector('.received'); listeningElement.setAttribute('style', 'display:none;'); receivedElement.setAttribute('style', 'display:block;'); console.log('Received Event: ' + id); } }; "use strict"; /** * Return a new instance of an MeolGraph object. * * @param containerId The id of the HTML element to be used as the graph container. * @param options The options to initiate the MeolGraph object with. */ var MeolGraph = function(containerId, options) { this.containerId = document.getElementById(containerId); this.svgcontainerId = options.svgcontainerId || "meol-graph"; this.dataSource = options.dataSource; this.canvasWidth = options.canvasWidth || heightScreen; this.canvasHeight = options.canvasHeight || widthScreen; this.charge = options.charge || -1200; this.distance = options.distance || 100; this.nodeBoxRx = options.nodeBoxRx || 10; this.nodeBoxRy = options.nodeBoxRy || 10; this.nodeBoxWidth = options.nodeBoxWidth || 110; this.nodeNonLeafHeight = options.nodeNonLeafHeight || 30; this.nodeLeafHeight = options.nodeLeafHeight || 90; this.nodeLabelXOffset = options.nodeLabelXOffset || 10; this.nodeLabel2YLeafOffset = options.nodeLabel2YLeafOffset || 24; this.nodeLabelYLeafOffset = options.nodeLabelYLeafOffset || 12; this.nodeLabelYNonLeafOffset = options.nodeLabelYNonLeafOffset || 17; this.nodeExpandCircleXOffset = options.nodeExpandCircleXOffset || 92; this.nodeExpandCircleYOffset = options.nodeExpandCircleYOffset || 15; this.nodeExpandCircleR = options.nodeExpandCircleR || 10; this.nodeImageWidth = options.nodeImageWidth || 104; this.nodeImageHeight = options.nodeImageHeight || 67; this.nodeImageXOffset = options.nodeImageXOffset || 3; this.nodeImageLeafYOffset = options.nodeImageLeafYOffset || 3; this.nodeTextHeight = options.nodeTextHeight || 10; this.charaterSplitNb = options.charaterSplitNb || 18; this.currentNode = options.currentNode || null; this.init(); }; /** * Init (data and layout) and display the graph. */ MeolGraph.prototype.init = function() { var self = this; this.vis = d3.select(this.containerId).append("svg:svg") .call(d3.behavior.zoom() .on("zoom", function() { self.vis.attr( "transform", "translate(" + d3.event.translate + ")" + " scale(" + d3.event.scale + ")"); })) .attr("width", this.canvasWidth) .attr("height", this.canvasHeight) .attr("id", this.svgcontainerId) .append('svg:g'); this.force = d3.layout.force().on("tick", function() { self.link.attr("x1", function(d) { return d.source.x + 55; }) .attr("y1", function(d) { return d.source.y+self._computeNodeHeight(d.source)/2; }) .attr("x2", function(d) { return d.target.x + 55; }) .attr("y2", function(d) { return d.target.y +self._computeNodeHeight(d.target)/2; }); self.graphNodes.attr("x", function(d) { return d.x; }) .attr("y", function(d) { return d.y; }); }).size([this.canvasWidth, this.canvasHeight]); d3.json(this.dataSource, function(json) { self.root = json; self.root._children = self.root.children; self.root.leaves = self._getLeaves(self.root); self.root.children = self.root.leaves; self._update(); }); }; MeolGraph.prototype._update = function() { var self = this; this.dataNodes = this._flatten(this.root); this.links = d3.layout.tree().links(this.dataNodes); this.link = this.vis.selectAll("line.link") .data(this.links, function(d) { return d.target.id; }); this.link.enter().insert("svg:line" , ".node") .attr("x1", function(d) { return d.source.x; }) .attr("y1", function(d) { return d.source.y; }) .attr("x2", function(d) { return d.target.x; }) .attr("y2", function(d) { return d.target.y; }) .attr("class", "link"); this.link.exit().remove(); this.force .nodes(this.dataNodes) .links(this.links) .charge(this.charge) .distance(this.distance) .start(); this.graphNodes = this.vis.selectAll("svg.node") .data(this.dataNodes, function(d) { return d.id; }); this.node = this.graphNodes .enter().append("svg:svg") .attr("class", "node") .attr("id", function(d) { return d.taxonConceptID; }) .attr("x", function(d) { return d.x; }) .attr("y", function(d) { return d.y; }); this.node.filter(function(d, i) { return (typeof d.image !== "undefined") & 1; }) .call(this.force.drag); var event='click'; if (document.documentElement.hasOwnProperty('ontouchstart')) event = 'touchstart'; this.node.on(event, function(clickedNode, i) { var taxon; if (typeof clickedNode.taxonConceptID !== "undefined") { var clickedNodeTaxonConceptId = clickedNode.taxonConceptID; var taxonConceptID = clickedNodeTaxonConceptId.toString(); var taxon = new directory.models.Taxon({id:clickedNodeTaxonConceptId, taxonConceptId: clickedNodeTaxonConceptId}); taxon.fetch({ add:true, success: function(data) { $('#meolGraphContainer svg#'+ self.currentNode+' rect').attr("class","child"); $("rect").attr("style",""); $('#meolGraphContainer svg#'+clickedNode.taxonConceptID+' rect').attr("style","fill: #B9DE00;"); self.currentNode = clickedNode.taxonConceptID; if (typeof clickedNode.image !== 'undefined') taxon.set('image_fileName', clickedNode.image ); $("#panel_taxon-detail").empty(); $("#panel_taxon-detail").append( new directory.views.TaxonPanel({model: data}).render().el); } }); } if (!clickedNode.terminal || self._isPenultimate(clickedNode) == true) { if (clickedNode.expanded && self._isPenultimate(clickedNode) == false) { self._collapseNode(clickedNode); $.each(clickedNode._children, function(index, child) { self._collapseNode(child); self._markChildrenAsNotExpanded(child) }); } else { self._expandNode(clickedNode); } self.graphNodes.selectAll("text.expand-icon").text(function(d) { var isPenultimate = self._isPenultimate(d); if (!d.expanded && !isPenultimate) { return "+"; } else { return isPenultimate?"":"-"; } }); } }); this.node.append("svg:rect") .attr("height", function(d) { return self._computeNodeHeight(d); }) .attr("width", this.nodeBoxWidth) .attr("class", "child" ) .attr("rx", this.nodeBoxRx) .attr("ry", this.nodeBoxRY) .attr("id", function(d) { return (d.depth==0 || d.depth==-1)?"root":"" ; }) ; var commontext = this.node.append("svg:text") .attr("x", self.nodeLabelXOffset) .attr("y", function(d) { return self.nodeLabelYLeafOffset; }) .attr("class", function(d) { return (typeof d.terminal === "undefined")?"common-name intermediary":"common-name terminal" }); commontext.append("svg:tspan") .attr("x", self.nodeLabelXOffset) .attr("dy", 0) .text(function(d) { return (typeof d.splitVernacularName === "undefined")?"":d.splitVernacularName[0]; }); commontext.append("svg:tspan") .attr("x", self.nodeLabelXOffset) .attr("dy", self.nodeTextHeight) .text(function(d) { if (typeof d.splitVernacularName === "undefined") return ""; else return (typeof d.splitVernacularName[1] === "undefined")?"":d.splitVernacularName[1]; }); commontext.append("svg:tspan") .attr("x", self.nodeLabelXOffset) .attr("dy", self.nodeTextHeight) .text(function(d) { if (typeof d.splitVernacularName === "undefined") return ""; else return (typeof d.splitVernacularName[2] === "undefined")?"":d.splitVernacularName[2]; }); var scitext = this.node.append("svg:text") .attr("x", self.nodeLabelXOffset) .attr("y", function(d) { if (typeof d.vernacularName === "undefined") { return self.nodeLabelYLeafOffset; } else { return (self.nodeLabelYLeafOffset + (d.vernacularLineNb)*10); }; }) .attr("class", "scientific-name"); scitext.append("svg:tspan") .attr("x", self.nodeLabelXOffset) .attr("dy", 0) .text(function(d) { return (d.splitName[0]); }); scitext.append("svg:tspan") .attr("x", self.nodeLabelXOffset) .attr("dy", self.nodeTextHeight) .text(function(d) { return (typeof d.splitName[1] === "undefined")?"":d.splitName[1]; }); scitext.append("svg:tspan") .attr("x", self.nodeLabelXOffset) .attr("dy", self.nodeTextHeight) .text(function(d) { return (typeof d.splitName[2] === "undefined")?"":d.splitName[2]; }); this.node.filter(function(d, i) { return (d.terminal != true) & 1; }) .append("svg:circle") .attr("cx", self.nodeExpandCircleXOffset) .attr("cy", self.nodeExpandCircleYOffset) .attr("r", self.nodeExpandCircleR) .attr("class", "expand-icon-circle" ) .attr("fill-opacity", function(d) { return (typeof d.terminal==="undefined") && (!self._isPenultimate(d) || d.depth ==0)?1:0 }); this.node.filter(function(d, i) { return (d.terminal != true) & 1; }) .append("svg:text") .attr("x", self.nodeExpandCircleXOffset - 2) .attr("y", self.nodeLabelYNonLeafOffset) .attr("class", "expand-icon" ) .attr("fill", "white" ) .text(function(d) { return (d.depth==0)?"+":"" }); this.node.filter(function(d, i) { return (typeof d.image !== "undefined") & 1; }) .append("svg:image") .attr("xlink:href", function(d) { return (typeof d.image !== "undefined")?"data/images_taxon/"+d.image:"" }) .attr("x", self.nodeImageXOffset) .attr("y", function(d) { return 30 + (d.vernacularLineNb-1)*self.nodeTextHeight + (d.scientificLineNb-1)*self.nodeTextHeight;}) .attr("width", self.nodeImageWidth) .attr("height", self.nodeImageHeight); this.graphNodes.exit().remove(); }; /** * Helper method - Return the correct height for a given node depending on its properties. * * @param node The node which height is to be returned. * @return The correct height for a given node depending on its properties. */ MeolGraph.prototype._computeNodeHeight = function(node) { var self = this; var baseHeight = this.nodeNonLeafHeight; var nodeLabel2Y = this.nodeLabel2YLeafOffset; if (typeof node.splitName==="undefined") { var splitName = self._splitText2Tspan(node.name, self.charaterSplitNb); node.splitName = splitName; node.scientificLineNb = node.splitName.length; } if ((typeof node.vernacularName!=="undefined") && (typeof node.splitVernacularName==="undefined")) { var splitVernacularName = self._splitText2Tspan(node.vernacularName, self.charaterSplitNb); node.splitVernacularName = splitVernacularName; node.vernacularLineNb = node.splitVernacularName.length; } if (typeof node.vernacularLineNb==="undefined") { node.vernacularLineNb = 0; } if (node.terminal == true) { baseHeight = this.nodeLeafHeight; } else { nodeLabel2Y = 0; } baseHeight = baseHeight + (node.scientificLineNb-1)*self.nodeTextHeight + (node.vernacularLineNb-1)*self.nodeTextHeight; if (baseHeight< self.nodeNonLeafHeight) baseHeight = self.nodeNonLeafHeight; return (typeof node.name==="undefined") ? baseHeight:baseHeight + nodeLabel2Y; }; MeolGraph.prototype.refreshCurrentNode = function(newNode) { var self = this; self.currentNode = newNode; self._update(); }; MeolGraph.prototype.displayPanel = function(clickedNodeTaxonConceptId, alternateFile ) { var taxon = new directory.models.Taxon({id:clickedNodeTaxonConceptId, taxonConceptId: clickedNodeTaxonConceptId}); taxon.fetch({ add:true, success: function(data) { $('#meolGraphContainer svg#'+ clickedNodeTaxonConceptId+' rect').attr("class","child"); $("rect").attr("style",""); $('#meolGraphContainer svg#'+clickedNodeTaxonConceptId+' rect').attr("style","fill: #B9DE00;"); if (typeof alternateFile !== 'undefined') taxon.set('image_fileName', alternateFile); $("#panel_taxon-detail").empty(); $("#panel_taxon-detail").append( new directory.views.TaxonPanel({model: data}).render().el); } }); }; d3.selection.prototype.moveToFront = function() { return this.each(function() { this.parentNode.appendChild(this); }); }; MeolGraph.prototype.changeCurrentNode = function(nodeId) { this.currentNode = nodeId; this._update(); }; /** * Return a list of all descendant nodes under the root. * * @param node The node which descendant node list is to be returned. * @return A list of all descendant nodes under the root. */ MeolGraph.prototype._flatten = function(root) { var nodes = []; function _flattenRecurse(node) { if (node.children) node.children.forEach(_flattenRecurse); nodes.push(node); } _flattenRecurse(root); return nodes; }; /** * Mark all descendant nodes as not expanded (i.e. set expanded property to false). * * @param root The node which all descendant node are to be marked as not expanded. */ MeolGraph.prototype._markChildrenAsNotExpanded = function(root) { function recurse(node) { if (node._children) node._children.forEach(recurse); node.expanded = false; } recurse(root); }; /** * Return a list of all leaf nodes under the root. * * @param node The node which leaf node list is to be returned. * @return A list of all leaf nodes under the root. */ MeolGraph.prototype._getLeaves = function(node) { var nodes = []; function _getLeavesRecurse(node) { if (node.children) { node.children.forEach(_getLeavesRecurse); } else { nodes.push(node); } } if (!node.terminal) { _getLeavesRecurse(node); } return nodes; }; /** * Return true if the node is penultimate. Else return false. * * @param node The node which penultimate property is to be determined. * @return true if the node is penultimate. Else return false. */ MeolGraph.prototype._isPenultimate = function(node) { var isPenultimate = true; if (node._children) { node._children.forEach(function(child) { if (!child.terminal) { isPenultimate = false; } }); } return isPenultimate; }; MeolGraph.prototype._updateAllExpandCollapseIcone = function() { var self = this; self.graphNodes.selectAll("text.expand-icon").text(function(d) { var isPenultimate = self._isPenultimate(d); if (!d.expanded && !isPenultimate) { return "+"; } else { return isPenultimate?"":"-"; } }); }; /** * Collapse given node. * * @param node The node to be collapsed. */ MeolGraph.prototype._collapseNode = function(node) { if (!node.terminal) { node.children = node.leaves; node.expanded = false; this._update(); } }; /** * Expand given node. * * @param node The node to be expanded. */ MeolGraph.prototype._expandNode = function(node) { var self = this; if (!node.terminal) { var children = []; $.each(node._children, function(index, child) { if (!child.hasBeenExpanded) { child.leaves =self._getLeaves(child); child._children = child.children; child.hasBeenExpanded = true; } child.children = child.leaves; children.push(child) }); node.children = children; node.expanded = true; node.hasBeenExpanded = true; this._update(); } }; /** * Expand all nodes of the graph * * @param node The root to be expanded. */ MeolGraph.prototype._expandAllNodes = function(node) { if (! node) node = this.root; var self = this; function recurse(node) { if (!node.terminal) { var children = []; $.each(node._children, function(index, child) { if (!child.hasBeenExpanded) { child.leaves =self._getLeaves(child); child._children = child.children; child.hasBeenExpanded = true; } child.children = child.leaves; children.push(child) }); node.children = children; node.expanded = true; node.hasBeenExpanded = true; if (node.children) { node.children.forEach(recurse); } } } recurse(node); self.currentNode = null; this._update(); this._updateAllExpandCollapseIcone(); }; /** * Collapse all nodes of the graph * * @param node The root to be collapsed. */ MeolGraph.prototype._collapseAllNodes = function(node) { if (! node) node = this.root; var self = this; function recurse(node) { if (!node.terminal) { node.children = node.leaves; node.expanded = false; } if (node.children) { node.children.forEach(recurse); } } recurse(node); self.currentNode = null; this._update(); this._updateAllExpandCollapseIcone(); this.vis.attr("transform","translate(0,0) scale(1)"); }; /** * Découpe une chaine de caractère tout les 25 caractères * Pour que cela rentre dans le rectangle * **/ MeolGraph.prototype._splitText2Tspan = function (name, len) { var splitname = new Array(); var middleString= ""; var segNb = 0; var segment = 0; var tabWord = name.split(" "); for(var i=0;i<tabWord.length;i++){ segment = segment + tabWord[i].length; if (segment>len) { splitname[segNb] = trim(middleString); segment = tabWord[i].length; segNb =segNb+1; middleString = tabWord[i]+' ' ; } else { middleString+= tabWord[i]+' '; } } splitname[segNb] = middleString; return splitname; }; function trim (myString) { return myString.replace(/^\s+/g,'').replace(/\s+$/g,'') } ; "use strict"; var reponse = ""; directory.models.Taxon = Backbone.Model.extend({ defaults: { "fk_collectionid":"", "pageid":null, "taxonConceptId":null, "taxonName":"", "flathierarchy":"", "preferredCommonNames":"", "textDesc_objectid":null, "textDesc_title":"", "textDesc_credits":"", "textDesc_description":"", "iucnStatus":"", "image_objectid":null, "image_title":"", "image_credits":"", "image_fileName":"", }, dao: directory.dao.TaxonDAO, parse: function (response) { var hier = eval(response.flathierarchy); response.flat = hier; response.iucnPicture = this.switchIucnStatusDesc(response.iucnStatus); return response; }, initialize: function() { }, switchIucnStatusDesc : function (IucnStatusDesc) { if (typeof(IucnStatusDesc)!='undefined'){ switch (IucnStatusDesc){ case "Least Concern (LC)": var imgStatus ="Status_iucn3.1_LC.svg.png"; var infoStatus ="Least Concern"; break; case "Near Threatened (NT)": var imgStatus ="Status_iucn3.1_NT.svg.png"; var infoStatus ="Near Threatened"; break; case "Vulnerable (VU)": var imgStatus ="Status_iucn3.1_VU.svg.png"; var infoStatus ="Vulnerable"; break; case "Endangered (EN)": var imgStatus ="Status_iucn3.1_EN.svg.png"; var infoStatus ="Endangered"; break; case "Critically Endangered (CR)": var imgStatus ="Status_iucn3.1_CR.svg.png"; var infoStatus ="Critically Endangered"; case "Extinct in the Wild (EW)": var imgStatus ="Status_iucn3.1_EW.svg.png"; var infoStatus ="Extinct in the wild"; break; case "Extinct (EX)": var imgStatus ="Status_iucn3.1_EX.svg.png"; var infoStatus ="Extinct"; break; } return [imgStatus , infoStatus] ; } } }); directory.models.TaxonCollection = Backbone.Collection.extend({ dao: directory.dao.TaxonDAO, model: directory.models.Taxon, initialize: function() { }, findByName: function(key) { var self = this; new this.dao(directory.db).findByName(key, function(data) { self.reset(data); }); }, findAllByCollectionid: function(key) { var self = this; new this.dao(directory.db).findAllByCollectionid(key, function(data) { self.reset(data); }); } }); directory.models.Gallery = Backbone.Model.extend({ defaults: { "Tgallery_PK_Id":null, "collectionid":null, "name":"", "description":"", "logo":"", "level":0, "ordre":0, "active": false }, dao:directory.dao.GalleryDAO, }); directory.models.GalleriesCollection = Backbone.Collection.extend({ model: directory.models.Gallery, modelType:"GalleriesCollection", dao:directory.dao.GalleryDAO, initialize: function() { }, findAll: function(key) { var self = this; new this.dao(directory.db).findAll(function(data) { self.reset(data); }); }, galleryIsActive: function(ordre) { var selectedGallery = this.findWhere( {'ordre': ordre}); if(typeof(selectedGallery) !== 'undefined'){ return selectedGallery.get('active'); } }, galleryOrdreById: function(collectionid) { var selectedGallery = this.findWhere( {'collectionid': collectionid}); if(typeof(selectedGallery) !== 'undefined'){ return selectedGallery.get('ordre'); } }, changeGalleryActivateState: function(ordre) { if (this.galleryIsActive(ordre) !== 'true' && this.galleryIsActive(ordre) !== 'undefined') { var newStatus = 'true'; var collectionid = this.findWhere( {'ordre': ordre}).get('collectionid'); this.findWhere( {'ordre': ordre}).set('id', collectionid) .set('active', newStatus) .save(); } }, }); directory.models.Item = Backbone.Model.extend({ defaults: { "fk_collectionid":null, "object_id":null, "pageid":null, "weightIucn":0, "weightContinent":0, "type":"", "taxonConceptId":null, "taxonName":"", "preferredCommonNames":"", "iNat":"", "title":"", "filename":"" }, dao: directory.dao.ItemDAO, parse: function (response) { response.iNat = response.iNat.split(","); return response; }, initialize: function() { }, }); directory.models.ItemsCollection = Backbone.Collection.extend({ dao: directory.dao.ItemDAO, model: directory.models.Item, initialize: function() { }, findAllByCollectionid: function(key) { var self = this; key = parseInt(key); new this.dao(directory.db).findByGalleryId(key, function(data) { self.reset(data); }); } }); directory.models.Profil = Backbone.Model.extend({ defaults: { "Tprofil_PK_Id":null, "pseudo":"", "avatar":"", "email":"", "creationDate":new Date() }, dao: directory.dao.ProfilDAO, initialize: function() { }, }); directory.models.ProfilsCollection = Backbone.Collection.extend({ dao: directory.dao.ProfilDAO, model: directory.models.Profil, initialize: function() { }, findById: function(key) { var self = this; new this.dao(directory.db).findById(key, function(data) { self.reset(data); }); }, findByPseudo: function(key) { var self = this; new this.dao(directory.db).findAllByCollectionid(key, function(data) { self.reset(data); }); }, }); directory.models.Score = Backbone.Model.extend({ defaults: { "fk_profil":null, "fk_gallery":0, "gameDate" :new Date(), "nbQuestionTotal":0, "nbAnswerGood":0, "nbAnswerGoodSequence":0, "score":0, "nbQuestionTotalAfrica":null, "nbQuestionTotalAsia":null, "nbQuestionTotalAntartica":null, "nbQuestionTotalEurope":null, "nbQuestionTotalOceania":null, "nbQuestionTotalAmericaNorth":null, "nbQuestionTotalAmericaSouth":null, "nbAnswerGoodAfrica":null, "nbAnswerGoodAsia":null, "nbAnswerGoodAntartica":null, "nbAnswerGoodEurope":null, "nbAnswerGoodOceania":null, "nbAnswerGoodAmericaNorth":null, "nbAnswerGoodAmericaSouth":null }, dao: directory.dao.ScoreDAO, initialize: function() { }, }); directory.models.ScoresCollection = Backbone.Collection.extend({ model: directory.models.Score, dao: directory.dao.ScoreDAO, initialize: function() { }, findAllScoreByProfilId : function (id) { var c = $.Deferred(); (new this.dao(directory.db)).findAllScoreByProfilId(id,function(data) { c.resolve(data); }); return c; }, findScoreMaxByGallery: function() { var d = $.Deferred(); (new this.dao(directory.db)).findScoreMaxByGallery(function(data) { d.resolve(data); }); return d; }, }); "use strict"; directory.utils.templateLoader = { templates: {}, load: function(names) { var self = this; $.each(names, function(index, name) { deferreds.push($.get('tpl/' + name + '.html', function(data) { self.templates[name] = data; })); }); }, get: function(name) { return this.templates[name]; } }; var fiboSuite = function(){ var memo =[0,1] ; var fibo = function(n){ if(n<2) return n ; if(memo[n]) return memo[n]; memo[n]= fibo(n-1) + fibo(n-2) ; return memo[n] ; }; return fibo ; }; function shuffleContinent(a){ var j = 0; var valI = ''; var valJ = valI; var l = a.length - 1; while(l > -1){ j = Math.floor(Math.random() * l); valI = a[l]; valJ = a[j]; a[l] = valJ; a[j] = valI; l = l - 1; } return a; }; function shuffle(myArray){ var i = myArray.length, j, temp; if ( i === 0 ) return false; while ( --i ) { j = Math.floor( Math.random() * ( i + 1 ) ); temp = myArray[i]; myArray[i] = myArray[j]; myArray[j] = temp; } return myArray; }; function capitaliseFirstLetter(string) { return string.charAt(0).toUpperCase() + string.slice(1); } "use strict"; Backbone.View.prototype.close = function () { var dfd = $.Deferred(); var self = this; var dfda = Array(); if (this.beforeClose) { 	dfda.push(this.beforeClose()); } else { 	var dfdl = $.Deferred(); dfda.push(dfdl); dfdl.resolve(true); } $.when.apply(null, dfda) .done(function() { 	self.undelegateEvents(); 	self.remove(); 	self.unbind(); 	dfd.resolve(); }) .fail(function() { 	dfd.reject(); }); return dfd.promise(); }; /* * Base view: customize Backbone.Layout for remote template loading */ directory.views.BaseView = Backbone.Layout.extend({ prefix: directory.config.root + '/tpl/', fetch: function(path) { path += '.html'; directory.templates = directory.templates || {}; if (directory.templates[path]) { return directory.templates[path]; } var done = this.async(); $.get(path, function(contents) { done(directory.templates[path] = _.template(contents)); }, "text"); }, serialize: function() { if (this.model) return this.model.toJSON(); return true; } }); directory.views.HomeView = directory.views.BaseView.extend({ template:'home-page', initialize : function() { }, }); 	 directory.views.SearchPage = Backbone.View.extend({ tagName:'div', id : 'searchPage', templateLoader: directory.utils.templateLoader, taxonsListView: directory.views.TaxonsListView, initialize: function() { this.model.findByName('Animalia'); this.template = _.template(this.templateLoader.get('search-page')); }, render: function(eventName) { $(this.el).html(this.template(this.model.toJSON())); this.listView = new directory.views.TaxonsListView({el: $('ul', this.el), model: this.model}); this.listView.render(); return this; }, events: { "keyup .search-key": "search" }, search: function(event) { var key = $('.search-key').val(); this.model.findByName(key); } }); directory.views.TaxonsListView = Backbone.View.extend({ initialize: function() { this.model.bind("reset", this.render, this); }, render: function(eventName) { $("#taxonList").empty(); _.each(this.model.models, function(taxon) { $("#taxonList").append(new directory.views.TaxonListItemView({model: taxon}).render().el); }, this); return this; } }); directory.views.TaxonListItemView = Backbone.View.extend({ tagName: "li", DetailTaxonsView: directory.views.TaxonPanel, initialize: function() { this.template = _.template(directory.utils.templateLoader.get('taxon-list-item')); }, render: function(eventName) { $(this.el).html(this.template(this.model.toJSON())); return this; }, events: { 'click div.taxon-list-item': 'loadTaxonDetail' }, loadTaxonDetail: function(event){ var taxonId = arguments[0].currentTarget.id; var taxon = new directory.models.Taxon({id:taxonId, taxonConceptId: taxonId}); taxon.fetch({ success: function(data) { $("#panel_taxon-detail").empty(); $("#panel_taxon-detail").append(new directory.views.TaxonPanel({model: data}).render().el); } }); }, }); directory.views.TaxonPanel = Backbone.View.extend({ initialize: function() { this.template = _.template(directory.utils.templateLoader.get('taxon-panel')); }, render: function(eventName) { $(this.el).html(this.template(this.model.toJSON())); return this; }, events: { 'click div.accordion-heading': 'changeIcon', 				'click .moreInfo':'tooltipIucn' }, changeIcon: function(event){ $('.accordion-group').on('hide', function () { 				$(this).children().children().children("i").removeClass('icon-minus'); 				$(this).children().children().children("i").addClass('icon-plus'); }); $('.accordion-group').on('show', function () { 				$(this).children().children().children("i").removeClass('icon-plus'); 				$(this).children().children().children("i").addClass('icon-minus'); }); }, 		tooltipIucn: function(event){ 			if (document.documentElement.hasOwnProperty('ontouchstart')){ 				var $title = $(".moreInfo").find(".title"); 				if (!$title.length) { 					$(".moreInfo").append('<span class="title">' + $(".moreInfo").attr("title") + '</span>'); 				} else { 					$title.remove(); 				} 			} 		}, }); directory.views.GalleryListView = Backbone.View.extend({ tagName:'div', id : 'gallery-list-page', templateLoader: directory.utils.templateLoader, initialize: function() { this.model.findAll(); this.model.bind("reset", this.render, this); this.template = _.template(this.templateLoader.get('gallery-page')); }, render: function(eventName) { $(this.el).html(this.template()); _.each(this.model.models, function(gallery) { $("#gallery-list", this.el).append(new directory.views.GalleryListItemView({model: gallery}).render().el); }, this); return this; }, 	events:{ 		'click #descCollBtn':'showdescCollModal', }, 	showdescCollModal: function(event){ 		$("#descCollModal").modal('toggle'); 	}, }); directory.views.playListGalleryView = Backbone.View.extend({ tagName:'div', id:'play-list-gallery-page', templateLoader: directory.utils.templateLoader, initialize: function() { this.collection.bind("reset", this.render, this); 	 this.currentProfil = this.options.currentProfil; this.template = _.template(this.templateLoader.get('play-gallery')); }, render: function(eventName) { $(this.el).html(this.template({collection: this.collection})); return this; }, 	 	events:{ 		'click #descPlayBtn':'showdescPlayModal', }, 	showdescPlayModal: function(event){ 		$("#descPLayModal").modal('toggle'); 	}, }); directory.views.GalleryListItemView = Backbone.View.extend({ tagName: "li", initialize: function() { this.template = _.template(directory.utils.templateLoader.get('gallery-list-item')); }, render: function(eventName) { $(this.el).html(this.template(this.model.toJSON())); return this; }, }); directory.views.GalleryDetailView = Backbone.View.extend({ tagName:'div', id:'collection-detail', initialize: function(){ this.template = _.template(directory.utils.templateLoader.get('gallery-detail')); }, render: function() { this.$el.html(this.template(this.model.toJSON())); return this; }, onAddToDom: function() { this.graphView = new directory.views.D3GraphPanelView({model:this.model}); $("#search-taxon-content", this.el).append(this.graphView.render().el); this.graphView.onAddToDom(); } }); directory.views.D3GraphPanelView = Backbone.View.extend({ tagName:'div', id:'d3-graph-panel', initialize: function(){ this.template = _.template(directory.utils.templateLoader.get('d3-graph-panel')); }, render: function() { this.$el.html(this.template(this.model.toJSON())); $("#panel_taxon-detail", this.el).append(new directory.views.GalleryPanel({model:this.model}).render().el); return this; }, onAddToDom: function() { this.graph = new MeolGraph("meolGraphContainer", { "dataSource" : "data/hierarchies/"+ this.model.get('collectionid') +".json", "canvasWidth" : widthScreen, "canvasHeight" : heightScreen, "charge" : -1200, "distance" : 100, "nodeBoxWidth" : 110, "nodeBoxRx" : 10, "nodeNonLeafHeight" : 30, "nodeLeafHeight" : 90, "nodeLabelXOffset" : 10, "nodeLabelYLeafOffset" : 12, "nodeLabel2YLeafOffset" : 24, "nodeLabelYNonLeafOffset" : 17, "nodeExpandCircleXOffset" : 92, "nodeExpandCircleYOffset" : 15, "nodeExpandCircleR" : 10, "nodeImageWidth" : 104, "nodeImageHeight" : 67, "nodeImageXOffset" : 3, "nodeImageLeafYOffset" : 3 }); }, events: { 'click #collapseAll': 'collapseAll', 'click #expandAll': 'expandAll', 'click .collectionName': 'displayPanelCollection', }, collapseAll: function(event) { if (typeof(this.graph)!='undefined') { this.graph._collapseAllNodes(); $("#panel_taxon-detail").empty(); $("#panel_taxon-detail", this.el).append(new directory.views.GalleryPanel({model:this.model}).render().el); } }, expandAll: function(event) { if (typeof(this.graph)!='undefined') { this.graph._expandAllNodes(); } }, displayPanelCollection : function(event){ if (typeof(this.graph)!='undefined') { $("#panel_taxon-detail").empty(); $("#panel_taxon-detail", this.el).append(new directory.views.GalleryPanel({model:this.model}).render().el); } } }); directory.views.GalleryPanel = Backbone.View.extend({ initialize: function() { this.template = _.template(directory.utils.templateLoader.get('gallery-panel')); }, render: function(eventName) { $(this.el).html(this.template(this.model.toJSON())); return this; }, }); directory.views.GalleryTaxonList = Backbone.View.extend({ el:'div', templateLoader: directory.utils.templateLoader, GalleryItemListView: directory.views.GalleryItemListView, initialize: function() { this.template = _.template(this.templateLoader.get('gallery-taxon-list')); }, render: function(eventName) { $(this.el).html(this.template(this.model.toJSON())); this.listView = new directory.views.GalleryItemListView({el: $('div', this.el), model: this.model}); this.listView.render(); return this; }, }); directory.views.playGameboardView = Backbone.View.extend({ template:'play-gameboard', templateLoader: directory.utils.templateLoader, itemsCollection : directory.models.ItemsCollection, currentScoreGame : directory.models.Score, tagName : 'div', id: 'play-gameboard', initialize : function() { 	 var self = this; this.itemsCollection = new directory.models.ItemsCollection(); var collectionId = this.model.get('collectionid'); 	 var currentCollectionOrdre = this.model.get('ordre'); 	 var nextCollectionOrdre = currentCollectionOrdre+1; 	 this.nextGalleryActive = directory.data.galleriesList.galleryIsActive(nextCollectionOrdre); 	 	 if(typeof(this.options.lastScoreByGallery) !== 'undefined'){ 	 this.lastScoreByGallery = this.options.lastScoreByGallery; 	 } 	 else{ 	 this.lastScoreByGallery = new directory.models.ScoresCollection(); 	 this.lastScoreByGallery.score = 0; 	 } 	 	 if(typeof(this.options.scoreByfk_profil) !== 'undefined'){ 	 this.scoreByfk_profil = this.options.scoreByfk_profil; 	 } 	 else{ 	 this.scoreByfk_profil = new directory.models.ScoresCollection(); 	 } 	 this.ScoreGlobal = this.options.ScoreGlobal; this.itemsCollection.findAllByCollectionid(collectionId); this.currentProfil = this.options.currentProfil; this.currentScoreGame = new directory.models.Score({"fk_profil":this.currentProfil.get('Tprofil_PK_Id'),"fk_gallery":collectionId}); 		this.template = _.template(this.templateLoader.get('play-gameboard')); this.model.bind("change", this.saveScore, this); }, render : function() { this.$el.html(this.template( {"gallery": this.model.toJSON(), "profil":this.currentProfil.toJSON(),"score":this.lastScoreByGallery.toJSON(),"allScore":this.ScoreGlobal})); $('#map', this.$el).load('css/map/map_EOL.svg'); 	 return this; }, events:{ 'click #selectRandomContinent': 'selectRandomContinent', 'change #currentContinent' : 'loadTaxonPlay', 'change #scoreTotalValue' : 'updateScore', 	 'change #nbAnwserGoodValue' : 'updateNbAnwserGood', 	 'change #nbAnwserGoodSequenceValue' : 'updateNbAnwserGoodSequenceValue', 'click #returnToGame' : 'returnToGame', 'click #navigateNewGallery' : 'navigateNewGallery', 		'click #ruleBtn':'toggleRulesModal', 		'click .gameQuit':'showGameQuitModal', }, beforeClose : function(){ this.saveScore(); }, navigateNewGallery : function(){ 		var self = this; 		self.beforeClose(); 		var nav = new directory.Router; 		var nextCollectionOrdre = this.model.get('ordre')+1; 		var urlNextGallery = directory.data.galleriesList.findWhere( {'ordre': nextCollectionOrdre}).get('collectionid'); 		nav.navigate("play/"+urlNextGallery, {trigger: true, replace: true}); }, returnToGame : function(event){ d3.select("#gameDetailPanel").classed("hidden",true); d3.select("#gamePanel").classed("hidden",false); }, selectRandomContinent: function(event){ 		$('#rulesModal').modal('hide'); 		d3.select("#map svg").selectAll(".pion").classed("hideInfoContinent",true); 		d3.select("#selectRandomContinent").classed("hidden",true); 		$("#firstMessagePlay").css("display","none"); 		$("#continentName").css("display","inherit"); 		var arrContinents = d3.select("#map svg").selectAll(".continent"); 		var rand = arrContinents[Math.floor(Math.random() * arrContinents.length)]; 		var shuffleRand = shuffleContinent(rand); 		var countAnime = 0; 		while( countAnime < 1){ 			animateContinent(); 			countAnime++; 		}; 	 		function animateContinent(){ 			var count=0; 			var countReset=200; 			for( var item in shuffleRand ){	 				d3.select(shuffleRand[item]).transition().delay(count).style("fill", "#B9DE00"); 				d3.select(shuffleRand[item]).transition().delay(countReset).style("fill", "#E1FA9F"); 				count+= 150; 				countReset+=200; 			}; 		}; 		 		var currentContinent = shuffleRand[2]; 		var currentContinentStr = $("#currentContinent").val(); 		var currentContinentShufStr = currentContinent.id; 		if (currentContinentShufStr === 'america-south') currentContinentShufStr = 'south america'; 		if (currentContinentShufStr === 'america-north') currentContinentShufStr = 'North America'; 		if(typeof(currentContinentStr) !== 'undefined'){ 			if(currentContinentShufStr.toLowerCase() == currentContinentStr.toLowerCase()){ 			 currentContinent = shuffleRand[2+1]; 			}; 		}; 		 		d3.selectAll(".continent").transition().delay(1600).style("fill", "#E1FA9F"); 		d3.select(currentContinent).transition().delay(1600).style("fill", "#B9DE00"); 		var currentContinentclass= currentContinent.id; 		setTimeout(function(){d3.select("."+currentContinentclass).classed("hideInfoContinent",false);},1800); 			 		$('#requestPanel').hide(); 			 		var currentContinentStr = currentContinent.id; 		if (currentContinentStr === 'america-south') currentContinentStr = 'South America'; 		if (currentContinentStr === 'america-north') currentContinentStr = 'North America'; 	 		$(".txtCurrentContinent").html(currentContinentStr); 		$("#currentContinent").val(currentContinentStr).trigger('change'); 		 		$("#myModal").modal('hide'); 	}, saveScore: function () { 		var currentsc = parseInt($("#scoreTotalValue").val()); 		if(currentsc > 0){ 			this.currentScoreGame.set('score', currentsc) 			.set('fk_gallery', this.model.get('collectionid')) 			.save(); 		} }, updateScore: function(event){ 	 var currentsc = parseInt($("#scoreTotalValue").val()); 	 var scoreProgressBar = currentsc/200; 	 var scoreProgressTotal= $("#meterScore").css("width"); 	 var currentCollectionOrdre = this.model.get('ordre'); 	 var nextCollectionOrdre = this.model.get('ordre')+1; 	 	if (directory.data.galleriesList.galleryIsActive(nextCollectionOrdre) !== 'true') { 		 if(parseInt(scoreProgressBar) >= 100){ 		 if(parseInt(nextCollectionOrdre) <= parseInt(directory.data.galleriesList.length)){ 			 this.nextCollectionName = directory.data.galleriesList.findWhere( {'ordre': nextCollectionOrdre}).get('name'); 			 directory.data.galleriesList.changeGalleryActivateState(nextCollectionOrdre); 			 setTimeout(function(){$("#collectionModal").fadeIn(1000).show(100).alert()},1000); 				setTimeout(function(){$("#collectionModal").animate({top:"0",left:"+=8%",zIndex:"1",width:"-=100px",height:"-=110px",right:"120px",margin:"0px"},500);},3400); 				setTimeout(function(){$("#collectionModal.alert h4").animate({fontSize:"16px",lineHeight:"20px"},500);},3400); 				setTimeout(function(){$("#collectionModal.alert button").animate({fontSize:"14px",padding:"0px"},500);},3400); 			 this.currentScoreGame.set('score', currentsc); 		 } 			setTimeout(function(){$(".progress").fadeIn(1000).css("box-shadow","0px 0px 10px 4px #E2E9EF");},3400); 			$("#meterScore").css("width",scoreProgressBar+"%"); 			setTimeout(function(){$("#meterScore").fadeIn(1000).css("width","100%");},3000); 			setTimeout(function(){$(".progress").fadeIn(1000).css("box-shadow","0px 0px 0px 0px #E2E9EF");},3000); 			 	 }else{ 				$("#meterScore").css("width",scoreProgressBar+"%"); 		 }; 	 	 	 }else{ 		 $("#meterScore").fadeIn(1000).css("width","100%"); 	}; 	 this.currentScoreGame.set('score', currentsc); $("#activateCollMessageModal").html("<em>New unlocked collection:<br/>"+this.nextCollectionName+"</em>"); }, updateNbAnwserGood: function(event){ 	 $("#nbAnwserGoodText").html($("#nbAnwserGoodValue").val()); 	 	 var currentsc = parseInt($("#nbAnwserGoodValue").val()); this.currentScoreGame.set('nbAnswerGood', currentsc); }, updateNbAnwserGoodSequenceValue: function(event){ 	 $("#bonusValue").val("0"); 	 var nextCollectionOrdre = this.model.get('ordre')+1; 	 	 var scoreTaxon = parseInt($("#scoreTotalValue").val()); 	 	 $("#nbAnwserGoodSequenceText").html($("#nbAnwserGoodSequenceValue").val()); 	 var currentnbAnswerGoodSequence = $("#nbAnwserGoodSequenceValue").val(); 	 var currentnbAnswerGoodRecordSequence = $("#nbAnwserGoodSequenceRecordText").text(); 	 var bonusFibo = fiboSuite() ; 	 	 if(parseInt(currentnbAnswerGoodSequence) > parseInt(currentnbAnswerGoodRecordSequence)){ 			$("#nbAnwserGoodSequenceRecordText").html($("#nbAnwserGoodSequenceValue").val()); 			var currentNbAnwserGoodSequenceValue = parseInt($("#nbAnwserGoodSequenceValue").val()); 			var currentFibo = bonusFibo(currentNbAnwserGoodSequenceValue); 			if (currentFibo < 2) { 				currentFibo = 0; 			}else{ 				currentFibo *=100; 			} 			$("#bonusValue").val(currentFibo).trigger('change'); 			$("#bonus").html($("#bonusValue").val()); 			 			var currentsc = this.currentScoreGame.get('nbAnswerGoodSequence'); 			this.currentScoreGame.set('nbAnswerGoodSequence', currentsc+1); 		} 		var scoreBonus = parseInt($("#bonusValue").val()); 		var score = scoreTaxon + scoreBonus; 		if(score > 0){ 			$("#scoreTotalValue").val(score).trigger('change'); 			$("#scoreText").html(score); 		} 		if(score === 0 || score > parseInt(this.lastScoreByGallery.score) || score > parseInt(this.lastScoreByGallery.get('score'))){ 			var scoreAllGalleries = score + this.ScoreGlobal ; 			$('#allScore').html(scoreAllGalleries); 		} 		if(parseInt(this.lastScoreByGallery.get('score')) > this.ScoreGlobal){ 			var scoreAllGalleries = score; 			$('#allScore').html(scoreAllGalleries); 		} 		if(score > this.ScoreGlobal){ 			var scoreAllGalleries = score; 			$('#allScore').html(scoreAllGalleries); 		} 	 		 		if(scoreBonus > 0){ 			$("#bonus").fadeIn(1000).css("box-shadow","0px 0px 12px 6px #E2E9EF"); 			setTimeout(function(){$("#bonus").fadeIn(3000).css("box-shadow","0px 0px 0px 0px #E2E9EF");},2400); 			$("#bonusMessageModal").html("+"+scoreBonus+" Bonus series points"); 		} 	 }, loadTaxonPlay: function(event){ var currentscnbQuestionTotal = this.currentScoreGame.get('nbQuestionTotal'); this.currentScoreGame.set('nbQuestionTotal', currentscnbQuestionTotal+1); 		var currentContinentStr = $("#currentContinent").val(); 	 		 		var selectedItemsCollection = new directory.models.ItemsCollection(); 		var indexId1 = Math.floor(Math.random()*this.itemsCollection.models.length); 		var presence = this.itemsCollection.models[indexId1].attributes.iNat.split(","); 		var capCurrentContinent = capitaliseFirstLetter(currentContinentStr); 		var countPresence=0; 		if(typeof(currentContinentStr) !== 'undefined'){ 			for (var idNat in presence) { 				if(countPresence > 16 || capCurrentContinent == presence[idNat] || typeof(presence[idNat]) === 'undefined'){ 					break; 				}; 				if(typeof(presence[idNat]) != 'undefined'){ 					while (capCurrentContinent != presence[idNat]) { 						if(countPresence > 16){ 							break; 						}; 						indexId1 = Math.floor(Math.random()*this.itemsCollection.models.length); 						var presence = this.itemsCollection.models[indexId1].attributes.iNat.split(","); 						countPresence +=1; 					}; 					selectedItemsCollection.models[0] = this.itemsCollection.models[indexId1]; 				};	 			}; 			 			selectedItemsCollection.models[0] = this.itemsCollection.models[indexId1]; 		}; var indexId2 = Math.floor(Math.random()*this.itemsCollection.models.length); while ( indexId2 ==indexId1 ) { indexId2 = Math.floor(Math.random()*this.itemsCollection.models.length); } selectedItemsCollection.models[1] = this.itemsCollection.models[indexId2]; var indexId3 = Math.floor(Math.random()*this.itemsCollection.models.length); while ( (indexId3 ==indexId1 ) || (indexId3 ==indexId2 ) ) { indexId3 = Math.floor(Math.random()*this.itemsCollection.models.length); } selectedItemsCollection.models[2] = this.itemsCollection.models[indexId3]; 		 		selectedItemsCollection.models = shuffle(selectedItemsCollection.models); 		 var falseItem = new directory.models.Item(); falseItem.set('filename', "unknown_taxon.jpg"); falseItem.set('Titem_PK_Id', "-1"); falseItem.set('preferredCommonNames', "None of these live here"); selectedItemsCollection.models[3] = falseItem; if (typeof(this.listView) !== 'undefined') { this.listView.remove(); } 		 this.listView = new directory.views.RandomItemListView({ model: selectedItemsCollection}); this.listView.gallery = this.model; this.listView.render(); $('#taxonSelectList', this.el).append(this.listView.el); 		$('#requestPanel').delay(2200).slideDown('slow'); $(".playableTaxonHidden").hide(); 		$(".txtCurrentContinent").html(currentContinentStr); return this; }, 	toggleRulesModal: function(event){ 		$("#rulesModal").modal('toggle'); 	}, 	showGameQuitModal: function(event){ 		var self = this; 		$("#myModal").modal('hide'); 		var nav = new directory.Router; 		var urlClicked = event.currentTarget.id; 		$("#gameQuitModal").modal('show'); 		$("#gameQuitValidate").click(function(){ 			self.beforeClose(); 			nav.navigate("#"+urlClicked, {trigger: true, replace: true}); 		}); 	}, 	 }); directory.views.RandomItemListView = Backbone.View.extend({ tagName: "div", gallery: directory.models.Gallery, initialize: function() { this.template = _.template(directory.utils.templateLoader.get('request-panel')); this.model.bind("reset", this.render, this); }, render: function(eventName) { this.$el.html(this.template(this.model.toJSON())); return this; }, events:{ 'click .playableTaxon img': 'expandItemSticker', 'click .playableTaxonValidate' : 'validateItem', 'click .playableTaxonDetail' : 'showGraph', }, showGraph : function(event){ d3.select("#gameDetailPanel").classed("hidden",false); d3.select("#gamePanel").classed("hidden",true); var arrayId = parseInt(event.currentTarget.id.replace("detailTaxon-", '')); var currentGalleryId = this.model.models[arrayId].attributes.fk_collectionid; if (typeof(this.graphView) === 'undefined' ) { $("#graph-panel").empty(); this.graphView = new directory.views.D3GraphPanelView({model:this.gallery}); $('#graph-panel').append(this.graphView.render().el); this.graphView.onAddToDom(); } else{ this.graphView.graph.refreshCurrentNode(this.model.models[arrayId].get('taxonConceptId')); } this.graphView.graph.displayPanel(this.model.models[arrayId].get('taxonConceptId'), this.model.models[arrayId].attributes.filename); }, expandItemSticker : function(event){ var target = event.currentTarget.id; /*$(".playableTaxonHidden").hide(5); $(".playableTaxon").removeAttr('style');*/ /*$("#"+target).parent().animate({width:"30%",height:"45%"},500); var cssObj={ 'z-index': '5','position': 'relative','margin': '-10% -10% 20px'} $("#"+target).parent().css(cssObj); $("#"+target).parent().children(".playableTaxonHidden").show(5);*/ }, validateItem: function(event){ 		$('#rulesModal').modal('hide'); $("#scoreMessageModal").empty(); 		$("#bonusMessageModal").empty(); $("#reponseMessageModal").empty(); 		$("#activateCollMessageModal").empty(); $("#myModal h5").remove(); 		 var target = event.currentTarget.id; var arrayId = parseInt(target.replace("validate-", '')); var currentObjectId = this.model.models[arrayId].attributes.Titem_PK_Id; $("#item-"+currentObjectId).removeClass("gradientGrey"); $("#item-"+currentObjectId).addClass("gameFalseSelectedItem"); var currentContinentStr = $("#currentContinent").val(); var weightTaxonIucn = 0; 		var weightTaxonContinent = 0; var correctItems = new Array(); var existTrueResponse = false; for (var id in this.model.models) { correctItems[id] = false; var presence = this.model.models[id].attributes.iNat.split(","); 	 for (var idNat in presence) { if (currentContinentStr.toLowerCase() == presence[idNat].toLowerCase()) { correctItems[id] = true; existTrueResponse = true; $("#item-"+this.model.models[id].attributes.Titem_PK_Id).removeClass("gradientGrey"); $("#item-"+this.model.models[id].attributes.Titem_PK_Id).addClass("gameTrueSelectedItem"); $("#reponseMessageModal").append('<li>'+this.model.models[id].attributes.preferredCommonNames+'</li>'); 					var idTaxon = this.model.models[id]; 					var weightTaxonIucn = idTaxon.get('weightIucn'); 					var weightTaxonContinent = idTaxon.attributes.weightContinent; }; }; }; 	 	 var found = false; 		var newArray = []; 		for (var i=0;i<correctItems.length;i++){ 			if(correctItems[i] == true){ 				newArray.push(i);	 			} 		} 		if(typeof(newArray) !== 'undefined'){ 			var arrayLength = newArray.length; 			 			if (arrayLength > 1){ 				var weightNbPossibilyties = arrayLength*50; 				$("#reponseMessageModal").before('<h5>Correct answers were...</h5>'); 			}else{ 				var weightNbPossibilyties = 0; 				$("#reponseMessageModal").before('<h5>The correct answer was...</h5>'); 			} 		}; 		 if ((correctItems[arrayId] == true ) || ((currentObjectId == -1 ) && (existTrueResponse == false)) ) { $("#item-"+currentObjectId).removeClass("gradientGrey"); $("#item-"+currentObjectId).addClass("gameTrueSelectedItem"); found = true; } if((currentObjectId == -1 ) && (existTrueResponse == false)){ 			$("#reponseMessageModal").append('<li>'+this.model.models[id].attributes.preferredCommonNames+'</li>'); 		} if (found == false) { if (! existTrueResponse) { $("#item--1").removeClass("gradientGrey"); $("#item--1").addClass("gameTrueSelectedItem "); 				$("#reponseMessageModal").append('<li>'+this.model.models[id].attributes.preferredCommonNames+'</li>'); } 			var currentScore = parseInt($("#scoreTotalValue").val()); 			$("#scoreTotalValue").val(currentScore+0).trigger('change'); 			 			var currentNbAnwserGood = parseInt($("#nbAnwserGoodValue").val()); 			$("#nbAnwserGoodValue").val(currentNbAnwserGood+0).trigger('change'); 			$("#myModal").removeAttr('style'); 			 			$("#nbAnwserGoodSequenceValue").val(0).trigger('change'); 			 			$("#txtMessageModal").html("<span id ='sorry'>Sorry!</span>"); } else { 		if(weightTaxonContinent > 1){ 		 var ponderationContinent = weightTaxonContinent*10; 		}else{ 		 var ponderationContinent = 0; 		}; 		if(weightTaxonIucn > 1){ 		 var ponderationIucn = weightTaxonIucn*10; 		}else{ 		 var ponderationIucn = 0; 		}; var currentScore = parseInt($("#scoreTotalValue").val()); 		var currentPonderation = weightNbPossibilyties + ponderationContinent + ponderationIucn; $("#scoreTotalValue").val(currentScore+1000-currentPonderation).trigger('change'); 		 		var currentNbAnwserGood = parseInt($("#nbAnwserGoodValue").val()); $("#nbAnwserGoodValue").val(currentNbAnwserGood+1).trigger('change'); 		 		var currentNbAnwserGood = parseInt($("#nbAnwserGoodSequenceValue").val()); $("#nbAnwserGoodSequenceValue").val(currentNbAnwserGood+1).trigger('change'); 		 		$("#myModal").css("box-shadow","0px 0px 25px 10px white"); 		 		 		$("#txtMessageModal").html("Well Done!"); 		 		$("#myModal h5").remove(); 		$("#reponseMessageModal").html(""); 		$("#scoreMessageModal").html(1000-currentPonderation+" points"); }; d3.select("#selectRandomContinent").classed("hidden",false); $("#myModal").modal('show'); /*$(".playableTaxon").not(".gameTrueSelectedItem").children(".playableTaxonHidden").hide(5); $(".playableTaxon").not(".gameTrueSelectedItem").removeAttr('style');*/ $(".playableTaxonValidate").addClass("disabled"); }, }); directory.views.ProfilDetailView = directory.views.BaseView.extend({ template: 'profil-page', initialize: function() { }, beforeRender: function() { 		var collection = new directory.models.ScoresCollection(); 		var deferred = collection.findAllScoreByProfilId(this.model.get('Tprofil_PK_Id')); 		var self = this; 		deferred.done(function(items) { 			var score = 0; 			var ordreMax = 1; 			_.each(items, function(item) { 				var ordreCurrent = directory.data.galleriesList.galleryOrdreById(String(item.fk_gallery)); 				if(ordreCurrent > ordreMax){ 					ordreMax = ordreCurrent; 				}; 				score += item.score_max;	 			}); 			var lastActiveGalleryName = directory.data.galleriesList.findWhere({'ordre' : parseInt(ordreMax)}).get('name'); 			self.insertView("#profileTable", new directory.views.TableProfilDetailView({collection:items,model:self.model, lastActiveGalleryName :lastActiveGalleryName, scoreTotal : score })).render(); 		}); }, 	 serialize: function() { return {model:this.model}; }, events:{ 'click #pseudo': 'showModalPseudo', 'click #profileSubmitModal': 'profileSubmitModal', }, showModalPseudo : function(event){ 		$("#profileModal").modal('show'); 	}, 	 	profileSubmitModal : function(event){ 		var profileTextModal = $("input#profileTextModal").val(); 		console.log(typeof(profileTextModal)); 		if(profileTextModal !== ""){ 			$("#pseudo").html(profileTextModal); 			this.model.set('Tprofil_PK_Id', parseInt(this.model.get('Tprofil_PK_Id'))) 			.set('pseudo', String(profileTextModal)) 			.save();	 		} 	}, }); directory.views.TableProfilDetailView = directory.views.BaseView.extend({ template: 'profil-table', initialize: function() { 	 this.scoreTotal = this.options.scoreTotal; this.lastActiveGalleryName = this.options.lastActiveGalleryName; this.model.bind("reset", this.render, this); }, serialize: function() { return {collection:this.collection,scoreTotal : this.scoreTotal, lastActiveGalleryName : this.lastActiveGalleryName }; }, }); directory.views.feedbackView = directory.views.BaseView.extend({ template: 'feedback-page', }); directory.views.creditPageView = directory.views.BaseView.extend({ template: 'credit-page', }); 